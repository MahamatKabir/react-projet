/*
############################################################################################
#	BŞEÜ - Bilgisayar Mühendisliği 4. Sınıf
#	Abdullah ŞENTÜRK
#	21407798390
#	asenturk22@yandex.com

#	Proje : Kardan Adam 
#	Sol Ok, Sağ Ok  =  XZ düzleminde  Y ekseninde kamera döndürülecek
#	Yukarı ve Aşağı Ok = ileri ve geri mevcut yönde hareket ettirecektir. 
############################################################################################
*/

#include <stdlib.h>
#include <math.h>
#include <GL/glut.h>

//Global variables
float angle = 0.0f;								//Kamera yönü için dönüş açısı
float lx = 0.0f, lz = -1.0f;					//Kameranın yönünü temsil eden asıl vektör. 
float x = 0.0f, z = 5.0f;						//Kameranın xz pozisyonu
float red = 1.0f, green = 1.0f, blue = 1.0f;	//Renk değerleri
//Tuş durumları bu değişkenler 0.0f olacak. 
float deltaMove = 0.0f;							//Tuş durumları - pozisyon için
float deltaAngle = 0.0f;						//Tuş durumları - yön  için
int xOrigin = -1;								
//Function Prototypes
void drawSnowMan();
void changeSize(int w, int h);
void renderScene(void);
void computePos(float deltaMove);
void computeDir(float deltaAngle);
void processNormalKeys(unsigned char key, int xx, int yy);
void pressKey(int key, int xx, int yy);
void releaseKey(int key, int x, int y);
void mouseMove(int x, int y);
void mouseButton(int button, int state, int x, int y);

int main(int argc, char* argv[]) {
	//GLUT' a ile ilk pencereyi oluştur. 
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_DOUBLE);
	glutInitWindowSize(500, 600);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("GLUT Dersi");

	//callBackleri kaydet
	glutDisplayFunc(renderScene);

	//main fonksiyonumuza yeni girişimiz burada
	glutReshapeFunc(changeSize);

	//boş zaman fonksiyonun kaydı
	glutIdleFunc(renderScene);

	//Klavye olayları dinleniyor
	glutSpecialFunc(pressKey);
	glutIgnoreKeyRepeat(1);
	glutKeyboardFunc(processNormalKeys);
	glutSpecialUpFunc(releaseKey);

	//Mouse olayları dinleniyor
	glutMouseFunc(mouseButton);
	glutMotionFunc(mouseMove);
	
	//Derinlik testini aktif et
	glEnable(GL_DEPTH_TEST);

	//Glut olay işleme döngüsüne gir
	glutMainLoop();

	return 0;
}


void drawSnowMan() {
	glColor3f(red, green, blue);

	//vücudu çiz
	glTranslatef(0.0f, 0.75f, 0.0f);
	glutSolidSphere(0.75f, 20, 20);

	//başı çiz
	glTranslatef(0.0f, 1.0f, 0.0f);
	glutSolidSphere(0.25f, 20, 20);

	//gözleri çiz
	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f);
	glTranslatef(0.05f, 0.10f, 0.18f);
	glutSolidSphere(0.05f, 10, 10);
	glTranslatef(-0.1f, 0.0f, 0.0f);
	glutSolidSphere(0.05f, 10, 10);
	glPopMatrix();

	//burnu çiz
	glColor3f(1.0f, 0.5f, 0.5f);
	glRotatef(0.0f, 1.0f, 0.0f, 0.0f);
	glutSolidCone(0.08f, 0.5f, 10, 2);
}

void changeSize(int w, int h) {
	//Pencere küçültüğünde, sıfırla bölmeyi önle
	//Pencere genişliğini sıfır yapamazsın. 
	if (h == 0) { h = 1; }
	float ratio = 1.0 * w / h;

	//Projeksiyon matrisini kullan
	glMatrixMode(GL_PROJECTION);

	//Matrisi ilkle(birim matrisi yükle)
	glLoadIdentity();

	//viewport(görüntü alanı) olarak tüm pencereyi set et
	glViewport(0, 0, w, h);

	//Doğru perspektifi set et
	gluPerspective(45, ratio, 0.1f, 100.0f);

	//Modelview' e dön
	glMatrixMode(GL_MODELVIEW);
}


void renderScene(void) {
	if (deltaMove)
		computePos(deltaMove);
	if (deltaAngle)
		computeDir(deltaAngle);

	//Renk tampfunu(ekranı) temizleyip bir üçgen çizecek. 
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	//dönüşümleri resetle
	glLoadIdentity();	

	//kamerayı set et (Kamera konumu ve yönünü ayarlamak için)
	//Bakılan nokta = Görüş hattımız + Kamera konumu
	gluLookAt(
		x, 1.0f, z,			   //Kamera pozisyonu
		x + lx, 1.0f, z + lz,  //Baktığımız noktayı tanımlar. 
		0.0f, 1.0f, 0.0f	   //üs vektörüdür. Bu kameranın eğik olmayacağı anlamındadır. 
	);

	//Zemini çiz
	//Rengi set eden OpenGL fonksiyonu
	glColor3f(0.9f, 0.9f, 0.9f);

	glBegin(GL_QUADS);
	glVertex3f(-100.0f, 0.0f, -100.0f);
	glVertex3f(-100.0f, 0.0f, 100.0f);
	glVertex3f(100.0f, 0.0f, 100.0f);
	glVertex3f(100.0f, 0.0f, -100.0f);
	glEnd();

	//36 tane kardan adam çiz
	for (int i = -3; i < 3; i++) {
		for (int j = -3; j < 3; j++) {
			glPushMatrix();
			glTranslatef(i * 10.0, 0, j * 10.0);
			drawSnowMan();
			glPopMatrix();
		}

	}

	glutSwapBuffers(); //Çift buffer kullanıldığında kullanılır. 
}

//Tuşun pozizyonu günceller
void computePos(float deltaMove) {
	x += deltaMove * lx * 0.1f;
	z += deltaMove * lz * 0.1f;
}

//Tuşun yönünü günceller. 
void computeDir(float deltaAngle) {
	angle += deltaAngle;
	lx = sin(angle);
	lz = -cos(angle);
}

void processNormalKeys(unsigned char key, int xx, int yy) {
	if (key == 27)
		exit(0);
}

//Tuşun basılınca değerleri değiştir.
void pressKey(int key, int xx, int yy) {
	switch (key) {
		case GLUT_KEY_UP: deltaMove = 0.5f; break;
		case GLUT_KEY_DOWN: deltaMove = -0.5f; break;
	}
}

//Tuş bırakılınca  değerleri sıfırla.
void releaseKey(int key, int x, int y) {
	switch (key) {
		case GLUT_KEY_UP  : 
		case GLUT_KEY_DOWN: deltaMove = 0; break;
	}
}

void mouseMove(int x, int y) {
	//Bu sadece sol düğme basılı olduğunda doğru olacak. 
	if (xOrigin >= 0) {
		//deltaAngle'ı güncelle
		deltaAngle = (x - xOrigin) * 0.001f;

		//Kameranın yönünü güncelle
		lx = sin(angle + deltaAngle);
		lz = -cos(angle + deltaAngle);
	}
}

void mouseButton(int button, int state, int x, int y) {
	//Sadece eğer sol düğme basılırsa harekete başla
	if (button == GLUT_LEFT_BUTTON) {
		//düğme bırakıldığında
		if (state == GLUT_UP) {
			angle += deltaAngle;
			xOrigin = -1;
		}
		else {
			//state = GLUT_DOWN
			xOrigin = x;
		}
	}
}