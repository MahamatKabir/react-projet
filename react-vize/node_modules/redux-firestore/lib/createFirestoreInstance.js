'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _merge2 = require('lodash/fp/merge');

var _merge3 = _interopRequireDefault(_merge2);

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createFirestoreInstance;

var _actions = require('./actions');

var _actions2 = require('./utils/actions');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createFirestoreInstance(firebase, configs, dispatch) {
  var defaultInternals = {
    listeners: {},

    config: _extends({ defaultConfig: _constants.defaultConfig }, configs)
  };

  firebase._ = (0, _merge3.default)(defaultInternals, firebase._);
  var aliases = [{ action: _actions.firestoreActions.deleteRef, name: 'delete' }, { action: _actions.firestoreActions.setListener, name: 'onSnapshot' }];

  var methods = (0, _actions2.mapWithFirebaseAndDispatch)(firebase, dispatch, _actions.firestoreActions, aliases);

  var methodsFromFirestore = (0, _reduce3.default)(_constants.methodsToAddFromFirestore, function (acc, methodName) {
    return firebase.firestore && typeof firebase.firestore()[methodName] === 'function' ? _extends({}, acc, _defineProperty({}, methodName, firebase.firestore()[methodName].bind(firebase.firestore()))) : acc;
  }, {});

  return _extends(methodsFromFirestore, firebase.firestore, { _: firebase._ }, configs.helpersNamespace ? _defineProperty({}, configs.helpersNamespace, methods) : methods);
}