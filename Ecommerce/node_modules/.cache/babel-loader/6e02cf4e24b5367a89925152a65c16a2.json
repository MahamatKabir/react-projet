{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _Input, _FilledInput;\n\nconst _excluded = [\"autoWidth\", \"children\", \"classes\", \"className\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"],\n      _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getSelectUtilityClasses } from './selectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getSelectUtilityClasses, classes);\n};\n\nconst Select = /*#__PURE__*/React.forwardRef(function Select(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSelect',\n    props: inProps\n  });\n\n  const {\n    autoWidth = false,\n    children,\n    classes: classesProp = {},\n    className,\n    displayEmpty = false,\n    IconComponent = ArrowDropDownIcon,\n    id,\n    input,\n    inputProps,\n    label,\n    labelId,\n    MenuProps,\n    multiple = false,\n    native = false,\n    onClose,\n    onOpen,\n    open,\n    renderValue,\n    SelectDisplayProps,\n    variant: variantProps = 'outlined'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const inputComponent = native ? NativeSelectInput : SelectInput;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const variant = fcs.variant || variantProps;\n  const InputComponent = input || {\n    standard: _Input || (_Input = /*#__PURE__*/_jsx(Input, {})),\n    outlined: /*#__PURE__*/_jsx(OutlinedInput, {\n      label: label\n    }),\n    filled: _FilledInput || (_FilledInput = /*#__PURE__*/_jsx(FilledInput, {}))\n  }[variant];\n\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent,\n    inputProps: _extends({\n      children,\n      IconComponent,\n      variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple\n    }, native ? {\n      id\n    } : {\n      autoWidth,\n      displayEmpty,\n      labelId,\n      MenuProps,\n      onClose,\n      onOpen,\n      open,\n      renderValue,\n      SelectDisplayProps: _extends({\n        id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? deepmerge(otherClasses, inputProps.classes) : otherClasses\n    }, input ? input.props.inputProps : {})\n  }, multiple && native && variant === 'outlined' ? {\n    notched: true\n  } : {}, {\n    ref,\n    className: clsx(classes.root, InputComponent.props.className, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   * @default false\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\n   * returns the value to be displayed when no items are selected.\n   *\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\n   * The label should either be hidden or forced to a shrunk state.\n   * @default false\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  label: PropTypes.node,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component uses a native `select` element.\n   * @default false\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {SelectChangeEvent<T>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event unless the change event is caused by browser autofill.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The `input` value. Providing an empty string will select no options.\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default Select;","map":{"version":3,"sources":["C:/Users/90539/Desktop/react-m-projet/netflix-projet/Ecommerce/node_modules/@material-ui/core/Select/Select.js"],"names":["_extends","_objectWithoutPropertiesLoose","_Input","_FilledInput","_excluded","_excluded2","React","PropTypes","clsx","deepmerge","unstable_composeClasses","composeClasses","SelectInput","formControlState","useFormControl","ArrowDropDownIcon","Input","NativeSelectInput","FilledInput","OutlinedInput","useThemeProps","getSelectUtilityClasses","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","Select","forwardRef","inProps","ref","props","name","autoWidth","children","classesProp","className","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant","variantProps","other","inputComponent","muiFormControl","fcs","states","InputComponent","standard","outlined","filled","otherClasses","cloneElement","type","undefined","notched","process","env","NODE_ENV","propTypes","bool","node","object","string","defaultValue","any","elementType","element","onChange","func","sx","value","oneOf","muiName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _Input, _FilledInput;\n\nconst _excluded = [\"autoWidth\", \"children\", \"classes\", \"className\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"],\n      _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getSelectUtilityClasses } from './selectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getSelectUtilityClasses, classes);\n};\n\nconst Select = /*#__PURE__*/React.forwardRef(function Select(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSelect',\n    props: inProps\n  });\n\n  const {\n    autoWidth = false,\n    children,\n    classes: classesProp = {},\n    className,\n    displayEmpty = false,\n    IconComponent = ArrowDropDownIcon,\n    id,\n    input,\n    inputProps,\n    label,\n    labelId,\n    MenuProps,\n    multiple = false,\n    native = false,\n    onClose,\n    onOpen,\n    open,\n    renderValue,\n    SelectDisplayProps,\n    variant: variantProps = 'outlined'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const inputComponent = native ? NativeSelectInput : SelectInput;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const variant = fcs.variant || variantProps;\n  const InputComponent = input || {\n    standard: _Input || (_Input = /*#__PURE__*/_jsx(Input, {})),\n    outlined: /*#__PURE__*/_jsx(OutlinedInput, {\n      label: label\n    }),\n    filled: _FilledInput || (_FilledInput = /*#__PURE__*/_jsx(FilledInput, {}))\n  }[variant];\n\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent,\n    inputProps: _extends({\n      children,\n      IconComponent,\n      variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple\n    }, native ? {\n      id\n    } : {\n      autoWidth,\n      displayEmpty,\n      labelId,\n      MenuProps,\n      onClose,\n      onOpen,\n      open,\n      renderValue,\n      SelectDisplayProps: _extends({\n        id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? deepmerge(otherClasses, inputProps.classes) : otherClasses\n    }, input ? input.props.inputProps : {})\n  }, multiple && native && variant === 'outlined' ? {\n    notched: true\n  } : {}, {\n    ref,\n    className: clsx(classes.root, InputComponent.props.className, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   * @default false\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\n   * returns the value to be displayed when no items are selected.\n   *\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\n   * The label should either be hidden or forced to a shrunk state.\n   * @default false\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  label: PropTypes.node,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component uses a native `select` element.\n   * @default false\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {SelectChangeEvent<T>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event unless the change event is caused by browser autofill.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The `input` value. Providing an empty string will select no options.\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default Select;"]},"metadata":{},"sourceType":"module"}